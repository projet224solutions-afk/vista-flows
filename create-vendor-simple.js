/**
 * üîß CR√âATION VENDEUR ET DONN√âES SIMPLIFI√âE - 224SOLUTIONS
 * Script simplifi√© pour cr√©er un vendeur et peupler les donn√©es essentielles
 */

import { createClient } from '@supabase/supabase-js';

console.log('üîß CR√âATION VENDEUR ET DONN√âES SIMPLIFI√âE');
console.log('=========================================\n');

// Configuration Supabase
const supabaseUrl = 'https://uakkxaibujzxdiqzpnpr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVha2t4YWlidWp6eGRpcXpwbnByIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwMDA2NTcsImV4cCI6MjA3NDU3NjY1N30.kqYNdg-73BTP0Yht7kid-EZu2APg9qw-b_KW9z5hJbM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function createVendorAndData() {
    console.log('üöÄ D√âMARRAGE...\n');

    let itemsAdded = 0;
    let testVendorId = null;

    // 1. D'abord, v√©rifier la structure de la table profiles
    console.log('üìä 1. V√âRIFICATION DE LA STRUCTURE PROFILES');
    console.log('===========================================');

    try {
        const { data: profiles, error } = await supabase
            .from('profiles')
            .select('*')
            .limit(1);

        if (!error) {
            console.log('‚úÖ Table profiles accessible');
            if (profiles && profiles.length > 0) {
                console.log('üìã Colonnes disponibles:', Object.keys(profiles[0]));
                // Utiliser le premier profil existant s'il y en a un
                if (profiles[0].role === 'vendeur') {
                    testVendorId = profiles[0].id;
                    console.log(`‚úÖ Vendeur existant trouv√©: ${profiles[0].first_name || 'Utilisateur'}`);
                }
            }
        } else {
            console.log(`‚ùå Erreur acc√®s profiles: ${error.message}`);
        }
    } catch (error) {
        console.log(`‚ùå Erreur v√©rification: ${error.message}`);
    }

    // 2. Si pas de vendeur, essayer d'en cr√©er un avec les colonnes de base
    if (!testVendorId) {
        console.log('\nüë§ 2. CR√âATION D\'UN VENDEUR DE TEST');
        console.log('==================================');

        try {
            // Cr√©er avec seulement les colonnes essentielles
            const testVendor = {
                first_name: 'Amadou',
                last_name: 'Diallo',
                email: 'amadou.diallo@224solutions.com',
                role: 'vendeur'
            };

            const { data: newVendor, error: vendorError } = await supabase
                .from('profiles')
                .insert(testVendor)
                .select()
                .single();

            if (!vendorError && newVendor) {
                console.log(`‚úÖ Vendeur cr√©√©: ${newVendor.first_name} ${newVendor.last_name}`);
                testVendorId = newVendor.id;
                itemsAdded++;
            } else {
                console.log(`‚ùå Erreur cr√©ation vendeur: ${vendorError?.message}`);

                // Essayer de r√©cup√©rer n'importe quel utilisateur existant
                const { data: anyUser } = await supabase
                    .from('profiles')
                    .select('id, first_name, last_name, role')
                    .limit(1);

                if (anyUser && anyUser.length > 0) {
                    testVendorId = anyUser[0].id;
                    console.log(`‚ÑπÔ∏è Utilisation utilisateur existant: ${anyUser[0].first_name || 'Utilisateur'} (${anyUser[0].role})`);
                }
            }
        } catch (error) {
            console.log(`‚ùå Erreur cr√©ation: ${error.message}`);
        }
    }

    if (!testVendorId) {
        console.log('‚ùå Impossible de continuer sans utilisateur');
        return;
    }

    // 3. Cr√©er les cat√©gories de d√©penses
    console.log('\nüè∑Ô∏è 3. CR√âATION DES CAT√âGORIES DE D√âPENSES');
    console.log('==========================================');

    const categories = [
        { name: 'Stock & Marchandises', color: '#10B981', icon: 'Package' },
        { name: 'Marketing & Publicit√©', color: '#8B5CF6', icon: 'Megaphone' },
        { name: 'Salaires & Personnel', color: '#F59E0B', icon: 'Users' },
        { name: 'Transport & Livraison', color: '#3B82F6', icon: 'Truck' },
        { name: '√âquipements & Outils', color: '#6B7280', icon: 'Settings' }
    ];

    const createdCategories = [];

    for (const category of categories) {
        try {
            const { data, error } = await supabase
                .from('expense_categories')
                .insert({
                    vendor_id: testVendorId,
                    name: category.name,
                    description: `Cat√©gorie ${category.name.toLowerCase()}`,
                    color: category.color,
                    icon: category.icon,
                    is_default: true,
                    is_active: true
                })
                .select()
                .single();

            if (!error) {
                console.log(`‚úÖ ${category.name}`);
                createdCategories.push(data);
                itemsAdded++;
            } else if (error.code === '23505') {
                console.log(`‚ÑπÔ∏è ${category.name} (existe d√©j√†)`);
                // R√©cup√©rer la cat√©gorie existante
                const { data: existing } = await supabase
                    .from('expense_categories')
                    .select('*')
                    .eq('vendor_id', testVendorId)
                    .eq('name', category.name)
                    .single();
                if (existing) createdCategories.push(existing);
            } else {
                console.log(`‚ùå ${category.name}: ${error.message}`);
            }
        } catch (err) {
            console.log(`‚ùå ${category.name}: ${err.message}`);
        }
    }

    // 4. Cr√©er quelques d√©penses d'exemple
    console.log('\nüí∞ 4. CR√âATION DES D√âPENSES D\'EXEMPLE');
    console.log('=====================================');

    if (createdCategories.length > 0) {
        const expenses = [
            {
                title: 'Achat stock t√©l√©phones',
                amount: 2500000,
                category_id: createdCategories[0]?.id,
                payment_method: 'bank_transfer',
                status: 'approved'
            },
            {
                title: 'Campagne Facebook Ads',
                amount: 150000,
                category_id: createdCategories[1]?.id,
                payment_method: 'card',
                status: 'pending'
            },
            {
                title: 'Salaires √©quipe octobre',
                amount: 800000,
                category_id: createdCategories[2]?.id,
                payment_method: 'wallet',
                status: 'paid'
            },
            {
                title: 'Carburant livraisons',
                amount: 85000,
                category_id: createdCategories[3]?.id,
                payment_method: 'cash',
                status: 'approved'
            }
        ];

        for (const expense of expenses) {
            if (expense.category_id) {
                try {
                    const { data, error } = await supabase
                        .from('vendor_expenses')
                        .insert({
                            vendor_id: testVendorId,
                            category_id: expense.category_id,
                            title: expense.title,
                            description: `D√©pense ${expense.title.toLowerCase()}`,
                            amount: expense.amount,
                            currency: 'XAF',
                            expense_date: new Date().toISOString().split('T')[0],
                            payment_method: expense.payment_method,
                            status: expense.status,
                            created_by: testVendorId
                        })
                        .select()
                        .single();

                    if (!error) {
                        console.log(`‚úÖ ${expense.title}: ${expense.amount.toLocaleString()} XAF`);
                        itemsAdded++;
                    } else {
                        console.log(`‚ùå ${expense.title}: ${error.message}`);
                    }
                } catch (err) {
                    console.log(`‚ùå ${expense.title}: ${err.message}`);
                }
            }
        }
    }

    // 5. Cr√©er quelques alertes
    console.log('\nüîî 5. CR√âATION DES ALERTES');
    console.log('=========================');

    const alerts = [
        {
            title: 'Budget Stock d√©pass√©',
            message: 'Le budget stock atteint 85% de la limite',
            severity: 'high'
        },
        {
            title: 'D√©pense √©lev√©e d√©tect√©e',
            message: 'D√©pense de 2.5M XAF n√©cessite v√©rification',
            severity: 'medium'
        }
    ];

    for (const alert of alerts) {
        try {
            const { data, error } = await supabase
                .from('expense_alerts')
                .insert({
                    vendor_id: testVendorId,
                    alert_type: 'budget_warning',
                    title: alert.title,
                    message: alert.message,
                    severity: alert.severity,
                    is_read: false
                })
                .select()
                .single();

            if (!error) {
                console.log(`‚úÖ ${alert.title}`);
                itemsAdded++;
            } else {
                console.log(`‚ùå ${alert.title}: ${error.message}`);
            }
        } catch (err) {
            console.log(`‚ùå ${alert.title}: ${err.message}`);
        }
    }

    // 6. R√©sum√©
    console.log('\nüìä R√âSUM√â FINAL');
    console.log('===============');

    console.log(`‚úÖ √âl√©ments cr√©√©s: ${itemsAdded}`);
    console.log(`üë§ Utilisateur: ${testVendorId}`);
    console.log(`üè∑Ô∏è Cat√©gories: ${createdCategories.length}`);

    if (itemsAdded >= 10) {
        console.log('\nüéâ SUCC√àS !');
        console.log('===========');
        console.log('‚úÖ Donn√©es de base cr√©√©es avec succ√®s');
        console.log('‚úÖ Le syst√®me peut maintenant fonctionner');

        console.log('\nüöÄ TESTEZ MAINTENANT:');
        console.log('1. üåê http://localhost:8080/vendeur');
        console.log('2. üì± Onglet "D√©penses" (rouge)');
        console.log('3. üéâ Vos donn√©es sont l√† !');

    } else {
        console.log('\n‚ö†Ô∏è SUCC√àS PARTIEL');
        console.log('==================');
        console.log('Quelques donn√©es ont √©t√© cr√©√©es');
        console.log('Le syst√®me fonctionnera partiellement');
    }
}

// Lancer la cr√©ation
createVendorAndData();
