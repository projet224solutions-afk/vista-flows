/**
 * üîÑ UTILITAIRE DE MISE √Ä JOUR DES TAUX DE CHANGE
 * Service automatique pour maintenir les taux de change √† jour
 */

import { CurrencyExchangeService } from '@/services/CurrencyExchangeService';

class CurrencyUpdater {
    private static instance: CurrencyUpdater;
    private updateInterval: NodeJS.Timeout | null = null;
    private isRunning = false;

    private constructor() { }

    static getInstance(): CurrencyUpdater {
        if (!CurrencyUpdater.instance) {
            CurrencyUpdater.instance = new CurrencyUpdater();
        }
        return CurrencyUpdater.instance;
    }

    /**
     * D√©marrer la mise √† jour automatique
     */
    start(): void {
        if (this.isRunning) {
            console.log('üîÑ Currency updater already running');
            return;
        }

        console.log('üöÄ Starting currency exchange rate updater...');
        this.isRunning = true;

        // Mise √† jour imm√©diate
        this.updateRates();

        // Programmer les mises √† jour suivantes (toutes les 6 heures)
        this.updateInterval = setInterval(() => {
            this.updateRates();
        }, 6 * 60 * 60 * 1000); // 6 heures

        console.log('‚úÖ Currency updater started (updates every 6 hours)');
    }

    /**
     * Arr√™ter la mise √† jour automatique
     */
    stop(): void {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        this.isRunning = false;
        console.log('‚èπÔ∏è Currency updater stopped');
    }

    /**
     * Effectuer une mise √† jour manuelle
     */
    async updateRates(): Promise<void> {
        try {
            console.log('üîÑ Updating exchange rates...');
            const result = await CurrencyExchangeService.updateExchangeRatesFromAPI();

            if (result.success) {
                console.log(`‚úÖ Exchange rates updated successfully: ${result.message}`);
            } else {
                console.warn(`‚ö†Ô∏è Exchange rates update failed: ${result.message}`);
            }
        } catch (error) {
            console.error('‚ùå Error updating exchange rates:', error);
        }
    }

    /**
     * V√©rifier le statut
     */
    getStatus(): { isRunning: boolean; hasInterval: boolean } {
        return {
            isRunning: this.isRunning,
            hasInterval: this.updateInterval !== null
        };
    }
}

// Instance singleton
export const currencyUpdater = CurrencyUpdater.getInstance();

// D√©marrer automatiquement en production
if (process.env.NODE_ENV === 'production') {
    currencyUpdater.start();
}

export default currencyUpdater;
