Projet : 224Solutions
Dépôt GitHub : https://github.com/projet224solutions-afk/vista-flows

Instructions globales :

1. Analyse **l’intégralité du projet** : frontend (React, Tailwind, Shadcn), backend (Node.js, Express, PostgreSQL/Supabase), PWA, API, intégrations tierces (Mapbox, Google Maps, Agora, wallets).  
2. Ne supprime ni ne modifie aucune fonctionnalité existante.  
3. Objectifs :  
   - Corriger toutes les erreurs.  
   - Optimiser le code pour performance et scalabilité.  
   - Améliorer la **sécurité** et la **résilience** (sécurisation des clés, protection des données utilisateurs, monitoring des systèmes, défense/riposte automatique si anomalies détectées).  
   - Rendre le **copilote extrêmement intelligent** : capable de comprendre le langage naturel, d’analyser le système, de détecter les failles ou erreurs et de proposer des corrections.  
   - Activer un **système de monitoring** complet : vérifier si certaines fonctionnalités sont créées mais non visibles sur le frontend.  

---

## Fonctionnalités à auditer, corriger et optimiser

### 1️⃣ PDG / Interface Agent / Gestion administrative
- Gestion complète des bureaux syndicats : création, modification, suppression, visualisation.  
- Suivi des commissions : calcul automatique et historique détaillé par agent, vendeur, livreur, transitaire.  
- Gestion multi-rôles : PDG, agents sous-PDG, permissions, accès sécurisé.  
- Tableau de bord financier : revenus, commissions, alertes, historiques.  
- Service monitoring : vérifier si des fonctionnalités créées sont invisibles ou non fonctionnelles sur le frontend.  
- Système de défense et riposte : détection de comportements anormaux ou frauduleux et mesures automatiques.

### 2️⃣ Bureau Syndicat
- Liste complète des membres et taxis/motos.  
- Génération de badges pour taxis/motos.  
- Gestion des alertes SOS.  
- Suivi du revenu et statistiques détaillées.  
- Possibilité de gérer l’email et numéro du président.  
- Interface téléchargeable et installable sur appareil du président (PWA ou application native).

### 3️⃣ Vendeur
- Interface PWA fonctionnant hors ligne et synchronisation automatique dès que l’internet revient.  
- Gestion des ventes, reçus, stock et multi-entrepôts.  
- Gestion des transactions et commissions.  
- Communication interne (texte, audio, vidéo) sécurisée avec clients et livreurs.

### 4️⃣ Client
- Paiement sécurisé via wallet, Mobile Money, carte bancaire.  
- Facturation dynamique (calcul automatique des frais 1%).  
- Suivi des commandes et trajets en temps réel.  
- Consultation de la position des taxis/motos disponibles et sélection optimale.  

### 5️⃣ Livreur / Taxi Moto
- Disponibilité en ligne/offline.  
- Réception et acceptation des courses.  
- Affichage instantané de la position et itinéraire vers le client (Mapbox + Google Maps).  
- Communication sécurisée texte/audio/vidéo avec client via Agora.  
- Création de facture dynamique pour le client.  
- Calcul automatique de la commission et transfert sécurisé dans wallet.  

### 6️⃣ Transitaire Internationale
- Gestion des envois internationaux.  
- Suivi de colis et alertes en temps réel.  
- Calcul des frais et commissions de manière automatique.  
- Communication sécurisée avec clients et agents locaux.

### 7️⃣ Copilote
- Intelligence naturelle : comprendre et répondre aux questions comme ChatGPT.  
- Capable d’analyser tout le système pour trouver les erreurs/fonctionnalités invisibles.  
- Peut générer des rapports d’anomalies et proposer des corrections.  
- Doit être connecté au backend et interagir avec toutes les interfaces (PDG, agents, clients, vendeurs, livreurs).

---

## 4️⃣ Instructions finales

1. Après chaque correction ou optimisation, créer un **commit clair et descriptif**.  
2. Pousser automatiquement les changements sur GitHub.  
3. Générer un **rapport détaillé** listant :  
   - Fonctionnalités vérifiées  
   - Erreurs corrigées  
   - Optimisations appliquées  
   - Améliorations de sécurité  
   - Fonctionnalités invisibles détectées et activées si nécessaire.  
4. Tout doit être fait de manière **ultra-professionnelle**, avec respect total des fonctionnalités existantes et performance maximale.
