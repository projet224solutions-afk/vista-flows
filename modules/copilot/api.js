/**
 * ü§ñ MODULE COPILOTE PDG - API BACKEND
 * Architecture compl√®te avec OpenAI, Supabase et Cursor
 * Mode additif uniquement - aucune suppression
 */

const express = require('express');
const router = express.Router();
const { Configuration, OpenAIApi } = require('openai');
const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');

// Configuration Supabase
const supabase = createClient(
  process.env.SUPABASE_URL || 'https://uakkxaibujzxdiqzpnpr.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
);

// Configuration OpenAI
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Middleware d'authentification renforc√©
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token d\'authentification requis' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ error: 'Token invalide' });
  }
};

// Middleware de v√©rification des permissions PDG
const requirePDG = (req, res, next) => {
  if (req.user.role !== 'PDG' && req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Acc√®s r√©serv√© au PDG et administrateurs' });
  }
  next();
};

/**
 * POST /api/copilot - Chat avec le Copilote PDG
 */
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { message, context } = req.body;
    const userId = req.user.sub;
    const userRole = req.user.role;

    if (!message || !message.trim()) {
      return res.status(400).json({ error: 'Message requis' });
    }

    console.log(`ü§ñ Copilote PDG - Message de ${userId} (${userRole}): ${message}`);

    // 1Ô∏è‚É£ R√©cup√©rer le profil complet utilisateur
    const { data: user, error: userError } = await supabase
      .from('profiles')
      .select(`
        id,
        email,
        first_name,
        last_name,
        role,
        created_at,
        kyc_verified,
        is_active
      `)
      .eq('id', userId)
      .single();

    if (userError || !user) {
      return res.status(404).json({ error: 'Utilisateur non trouv√©' });
    }

    // 2Ô∏è‚É£ R√©cup√©rer les donn√©es financi√®res
    const { data: wallet } = await supabase
      .from('wallets')
      .select('balance, currency, is_active')
      .eq('user_id', userId)
      .single();

    // 3Ô∏è‚É£ R√©cup√©rer les transactions r√©centes
    const { data: transactions } = await supabase
      .from('transactions')
      .select('amount, currency, type, description, created_at, status')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    // 4Ô∏è‚É£ R√©cup√©rer l'historique de conversation
    const { data: history } = await supabase
      .from('ai_chats')
      .select('role, message, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: true })
      .limit(10);

    // 5Ô∏è‚É£ R√©cup√©rer les rapports d'audit r√©cents
    const { data: auditReports } = await supabase
      .from('audit_reports')
      .select('summary, status, created_at')
      .order('created_at', { ascending: false })
      .limit(3);

    // 6Ô∏è‚É£ Construire le prompt syst√®me riche
    const systemPrompt = `Tu es le Copilote PDG de l'application 224SOLUTIONS, un assistant IA intelligent et expert.

INFORMATIONS UTILISATEUR:
- Nom: ${user.first_name} ${user.last_name}
- Email: ${user.email}
- R√¥le: ${user.role}
- KYC V√©rifi√©: ${user.kyc_verified ? 'Oui' : 'Non'}
- Statut: ${user.is_active ? 'Actif' : 'Inactif'}
- Solde wallet: ${wallet?.balance || 0} ${wallet?.currency || 'GNF'}
- Devise par d√©faut: ${wallet?.currency || 'GNF'}

CAPACIT√âS AVANC√âES:
- Gestion financi√®re compl√®te (wallet, transactions, taux de change)
- Audit syst√®me et analyse de code
- Communication avec Cursor pour corrections automatiques
- Rapports d'audit et recommandations
- Simulation de conversions et calculs financiers
- Gestion des utilisateurs et permissions

CONTEXTE SYST√àME:
- Transactions r√©centes: ${transactions?.length || 0} transactions
- Rapports d'audit: ${auditReports?.length || 0} rapports r√©cents
- Mode: ${userRole === 'PDG' ? 'Administrateur complet' : 'Utilisateur standard'}

ACTIONS M√âTIERS DISPONIBLES:
- /audit run ‚Üí Lancer un audit syst√®me complet
- /audit report ‚Üí Consulter les rapports d'audit
- /cursor analyze ‚Üí Analyser du code avec Cursor
- /cursor patch ‚Üí Appliquer des correctifs automatiques
- /finance simulation ‚Üí Simuler des conversions
- /rate show ‚Üí Afficher les taux de change
- /rate edit ‚Üí Modifier les taux (PDG uniquement)
- /users manage ‚Üí Gestion des utilisateurs
- /system status ‚Üí Statut du syst√®me

STYLE DE R√âPONSE:
- R√©ponds en fran√ßais naturel, style ChatGPT professionnel
- Sois pr√©cis, technique mais accessible
- Utilise des emojis appropri√©s pour la clart√©
- Structure tes r√©ponses avec des listes et explications d√©taill√©es
- Si une action n√©cessite des permissions sp√©ciales, l'expliquer clairement

AUDIT ET CURSOR:
- Tu peux lancer des audits syst√®me complets
- Tu peux communiquer avec Cursor pour analyser et corriger du code
- Tu peux appliquer des correctifs automatiques (avec autorisation)
- Tu peux cr√©er des PRs automatiques sur GitHub
- Tu peux g√©n√©rer des rapports d√©taill√©s

R√âPONSES R√âCENTES:
${transactions?.map(t => `- ${t.type}: ${t.amount} ${t.currency} (${t.description}) - ${t.status}`).join('\n') || 'Aucune transaction r√©cente'}

RAPPORTS D'AUDIT R√âCENTS:
${auditReports?.map(r => `- ${r.summary} (${r.status})`).join('\n') || 'Aucun rapport d\'audit r√©cent'}

R√©ponds de mani√®re naturelle, utile et professionnelle √† l'utilisateur.`;

    // 7Ô∏è‚É£ Construire les messages pour OpenAI
    const messages = [
      { role: 'system', content: systemPrompt },
      // Historique de conversation
      ...history.map(h => ({
        role: h.role === 'user' ? 'user' : 'assistant',
        content: h.message
      })),
      { role: 'user', content: message }
    ];

    // 8Ô∏è‚É£ Appel OpenAI GPT-4o-mini
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      temperature: 0.7,
      max_tokens: 1500,
    });

    const reply = completion.choices[0].message.content;

    // 9Ô∏è‚É£ Sauvegarder la conversation
    await supabase.from('ai_chats').insert([
      { user_id: userId, role: 'user', message: message.trim() },
      { user_id: userId, role: 'assistant', message: reply }
    ]);

    // üîü Logger l'interaction
    await supabase.from('ai_logs').insert({
      user_id: userId,
      action: 'copilot_chat',
      payload_json: { message, context },
      result: { reply_length: reply.length, model: 'gpt-4o-mini' },
      timestamp: new Date().toISOString()
    });

    console.log(`‚úÖ Copilote PDG - R√©ponse g√©n√©r√©e pour ${userId}`);

    res.json({ 
      reply,
      timestamp: new Date().toISOString(),
      user_context: {
        name: `${user.first_name} ${user.last_name}`,
        role: user.role,
        balance: wallet?.balance || 0,
        currency: wallet?.currency || 'GNF',
        kyc_verified: user.kyc_verified,
        is_active: user.is_active
      },
      capabilities: {
        audit: userRole === 'PDG' || userRole === 'admin',
        cursor: userRole === 'PDG' || userRole === 'admin',
        finance: true,
        users: userRole === 'PDG' || userRole === 'admin'
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur Copilote PDG:', error);
    
    const fallbackReply = `D√©sol√©, je rencontre une difficult√© technique. Veuillez r√©essayer dans quelques instants. Si le probl√®me persiste, contactez le support technique.`;
    
    res.status(500).json({ 
      error: 'Erreur serveur copilote',
      reply: fallbackReply
    });
  }
});

/**
 * POST /api/copilot/action - Ex√©cuter une action m√©tier
 */
router.post('/action', authenticateToken, async (req, res) => {
  try {
    const { action, params } = req.body;
    const userId = req.user.sub;
    const userRole = req.user.role;

    console.log(`üéØ Action m√©tier ${action} pour ${userId} (${userRole})`);

    let result;

    switch (action) {
      case 'audit_run':
        if (userRole !== 'PDG' && userRole !== 'admin') {
          return res.status(403).json({ error: 'Action r√©serv√©e au PDG' });
        }
        // Importer et ex√©cuter l'audit
        const { runAudit } = require('../audit/runAudit');
        result = await runAudit();
        break;

      case 'audit_report':
        const { data: reports } = await supabase
          .from('audit_reports')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(10);
        result = { reports };
        break;

      case 'cursor_analyze':
        if (userRole !== 'PDG' && userRole !== 'admin') {
          return res.status(403).json({ error: 'Action r√©serv√©e au PDG' });
        }
        const { sendToCursor } = require('../cursor/connector');
        result = await sendToCursor('analyze', params);
        break;

      case 'cursor_patch':
        if (userRole !== 'PDG' && userRole !== 'admin') {
          return res.status(403).json({ error: 'Action r√©serv√©e au PDG' });
        }
        const { applyPatch } = require('../cursor/connector');
        result = await applyPatch(params);
        break;

      case 'finance_simulation':
        const { simulateConversion } = require('../finance/simulator');
        result = await simulateConversion(params);
        break;

      case 'rate_show':
        const { data: rates } = await supabase
          .from('exchange_rates')
          .select('*')
          .order('created_at', { ascending: false });
        result = { rates };
        break;

      case 'rate_edit':
        if (userRole !== 'PDG' && userRole !== 'admin') {
          return res.status(403).json({ error: 'Action r√©serv√©e au PDG' });
        }
        const { updateRate } = require('../finance/rateManager');
        result = await updateRate(params);
        break;

      default:
        return res.status(400).json({ error: 'Action non support√©e' });
    }

    // Logger l'action
    await supabase.from('ai_logs').insert({
      user_id: userId,
      action: `copilot_action_${action}`,
      payload_json: params,
      result: result,
      timestamp: new Date().toISOString()
    });

    res.json({ 
      success: true,
      action,
      result,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur action m√©tier:', error);
    
    res.status(500).json({ 
      error: 'Erreur lors de l\'ex√©cution de l\'action m√©tier',
      details: error.message
    });
  }
});

/**
 * GET /api/copilot/status - Statut du service
 */
router.get('/status', authenticateToken, (req, res) => {
  res.json({ 
    status: 'active',
    service: 'Copilote PDG 224Solutions',
    version: '2.0.0',
    features: [
      'ChatGPT style conversation',
      'Int√©gration Supabase compl√®te',
      'Actions m√©tiers avanc√©es',
      'Audit syst√®me automatique',
      'Communication Cursor',
      'Push automatique GitHub',
      'S√©curit√© par r√¥le renforc√©e'
    ],
    capabilities: {
      audit: req.user.role === 'PDG' || req.user.role === 'admin',
      cursor: req.user.role === 'PDG' || req.user.role === 'admin',
      finance: true,
      users: req.user.role === 'PDG' || req.user.role === 'admin'
    }
  });
});

module.exports = router;
