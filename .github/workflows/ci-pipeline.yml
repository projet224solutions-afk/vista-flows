name: CI/CD Pipeline - 224Solutions

on:
  push:
    branches: [ main, improvement/* ]
  pull_request:
    branches: [ main ]

jobs:
  # Tests unitaires et linting
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # Tests E2E
  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start test database
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres
        sleep 10
        
    - name: Run database migrations
      run: npm run db:migrate:test
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/224solutions_test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/

  # Build et d√©ploiement sandbox
  deploy-sandbox:
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t 224solutions:${{ github.sha }} .
        docker tag 224solutions:${{ github.sha }} 224solutions:latest
        
    - name: Deploy to sandbox
      run: |
        # D√©ployer vers le namespace sandbox-pdg
        kubectl apply -f k8s/sandbox/
        kubectl set image deployment/224solutions-frontend frontend=224solutions:${{ github.sha }} -n sandbox-pdg
        kubectl set image deployment/224solutions-backend backend=224solutions:${{ github.sha }} -n sandbox-pdg
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/224solutions-frontend -n sandbox-pdg --timeout=300s
        kubectl rollout status deployment/224solutions-backend -n sandbox-pdg --timeout=300s
        
    - name: Run smoke tests
      run: |
        # Tests de fum√©e sur l'environnement sandbox
        npm run test:smoke -- --base-url=https://sandbox.224solutions.com
        
    - name: Comment PR with deployment info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **D√©ploiement Sandbox R√©ussi**
            
            **URL Sandbox:** https://sandbox.224solutions.com
            **Commit:** ${{ github.sha }}
            **Namespace:** sandbox-pdg
            
            Les tests E2E ont √©t√© ex√©cut√©s avec succ√®s sur l'environnement sandbox.`
          })

  # D√©ploiement production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      run: |
        docker build -t 224solutions:${{ github.sha }} .
        docker tag 224solutions:${{ github.sha }} 224solutions:latest
        docker push 224solutions:${{ github.sha }}
        docker push 224solutions:latest
        
    - name: Deploy to production
      run: |
        kubectl apply -f k8s/production/
        kubectl set image deployment/224solutions-frontend frontend=224solutions:${{ github.sha }} -n production
        kubectl set image deployment/224solutions-backend backend=224solutions:${{ github.sha }} -n production
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/224solutions-frontend -n production --timeout=600s
        kubectl rollout status deployment/224solutions-backend -n production --timeout=600s
        
    - name: Run health checks
      run: |
        # V√©rifications de sant√© post-d√©ploiement
        npm run test:health -- --base-url=https://224solutions.com
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ D√©ploiement production r√©ussi - 224Solutions'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
