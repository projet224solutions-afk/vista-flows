/**
 * TEST SYST√àME S√âCURIT√â MOTOS
 * Validation compl√®te du module de s√©curit√© intelligent
 * 224Solutions - Test automatis√©
 */

import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üîç TEST SYST√àME S√âCURIT√â MOTOS');
console.log('===============================\n');

let testsPassed = 0;
let testsTotal = 0;

function test(name, condition) {
    testsTotal++;
    if (condition) {
        console.log(`‚úÖ ${name}`);
        testsPassed++;
    } else {
        console.log(`‚ùå ${name}`);
    }
}

// 1. V√©rification des migrations SQL
console.log('üóÑÔ∏è V√âRIFICATION MIGRATIONS SQL...');
const migrationFile = 'sql/create-moto-security-system.sql';
test('Migration SQL existe', existsSync(migrationFile));

if (existsSync(migrationFile)) {
    const migrationContent = readFileSync(migrationFile, 'utf8');
    test('Table moto_alertes d√©finie', migrationContent.includes('CREATE TABLE moto_alertes'));
    test('Table security_notifications d√©finie', migrationContent.includes('CREATE TABLE security_notifications'));
    test('Table moto_security_audit d√©finie', migrationContent.includes('CREATE TABLE moto_security_audit'));
    test('Fonction create_moto_alert d√©finie', migrationContent.includes('CREATE OR REPLACE FUNCTION create_moto_alert()'));
    test('Fonction mark_moto_found d√©finie', migrationContent.includes('CREATE OR REPLACE FUNCTION mark_moto_found'));
    test('Vue moto_security_stats d√©finie', migrationContent.includes('CREATE OR REPLACE VIEW moto_security_stats'));
    test('Index de performance cr√©√©s', migrationContent.includes('CREATE INDEX'));
    test('RLS activ√©', migrationContent.includes('ENABLE ROW LEVEL SECURITY'));
}

// 2. V√©rification des routes backend
console.log('\nüõ£Ô∏è V√âRIFICATION ROUTES BACKEND...');
const backendRoutes = 'backend/routes/motoSecurity.js';
test('Routes backend existent', existsSync(backendRoutes));

if (existsSync(backendRoutes)) {
    const routesContent = readFileSync(backendRoutes, 'utf8');
    test('Route /report-stolen d√©finie', routesContent.includes('router.post(\'/report-stolen\''));
    test('Route /register d√©finie', routesContent.includes('router.post(\'/register\''));
    test('Route /alerts d√©finie', routesContent.includes('router.get(\'/alerts\''));
    test('Route /alerts/:id/resolve d√©finie', routesContent.includes('router.post(\'/alerts/:id/resolve\''));
    test('Route /stats d√©finie', routesContent.includes('router.get(\'/stats\''));
    test('Route /audit d√©finie', routesContent.includes('router.get(\'/audit\''));
    test('Fonction notifyBureaux d√©finie', routesContent.includes('async function notifyBureaux'));
    test('Gestion d\'erreurs pr√©sente', routesContent.includes('try {') && routesContent.includes('catch'));
}

// 3. V√©rification des composants React
console.log('\nüß© V√âRIFICATION COMPOSANTS REACT...');
const components = [
    'src/components/security/ReportStolenMoto.tsx',
    'src/components/security/MotoSecurityAlerts.tsx',
    'src/components/security/MotoSecurityDashboard.tsx'
];

components.forEach(component => {
    test(`Composant ${component} existe`, existsSync(component));
    
    if (existsSync(component)) {
        const content = readFileSync(component, 'utf8');
        test(`${component} - Interface React valide`, content.includes('export default function'));
        test(`${component} - Imports corrects`, content.includes('import React'));
        test(`${component} - Props typ√©es`, content.includes('interface') || content.includes('Props'));
    }
});

// 4. V√©rification des hooks
console.log('\nüé£ V√âRIFICATION HOOKS...');
const hooksFile = 'src/hooks/useMotoSecurity.ts';
test('Hook useMotoSecurity existe', existsSync(hooksFile));

if (existsSync(hooksFile)) {
    const hooksContent = readFileSync(hooksFile, 'utf8');
    test('Hook export√© correctement', hooksContent.includes('export function useMotoSecurity'));
    test('Gestion √©tat notifications', hooksContent.includes('useState<SecurityNotification[]'));
    test('Gestion √©tat stats', hooksContent.includes('useState<MotoSecurityStats'));
    test('Synchronisation temps r√©el', hooksContent.includes('supabase.channel'));
    test('Fonctions utilitaires', hooksContent.includes('loadNotifications') && hooksContent.includes('markAsRead'));
}

// 5. V√©rification du worker
console.log('\n‚öôÔ∏è V√âRIFICATION WORKER...');
const workerFile = 'backend/workers/motoSecurityWorker.js';
test('Worker existe', existsSync(workerFile));

if (existsSync(workerFile)) {
    const workerContent = readFileSync(workerFile, 'utf8');
    test('Classe MotoSecurityWorker d√©finie', workerContent.includes('class MotoSecurityWorker'));
    test('M√©thode start() d√©finie', workerContent.includes('start()'));
    test('M√©thode scanNewRegistrations() d√©finie', workerContent.includes('scanNewRegistrations()'));
    test('M√©thode checkMotoForDuplicates() d√©finie', workerContent.includes('checkMotoForDuplicates()'));
    test('Gestion cron d√©finie', workerContent.includes('cron.schedule'));
    test('Notifications automatiques', workerContent.includes('sendSecurityNotifications'));
}

// 6. V√©rification de l'int√©gration
console.log('\nüîó V√âRIFICATION INT√âGRATION...');
const taxiMotoFile = 'src/pages/TaxiMoto.tsx';
const pdgFile = 'src/pages/PDGDashboard.tsx';

test('Int√©gration TaxiMoto', existsSync(taxiMotoFile));
test('Int√©gration PDGDashboard', existsSync(pdgFile));

if (existsSync(taxiMotoFile)) {
    const taxiContent = readFileSync(taxiMotoFile, 'utf8');
    test('Import MotoSecurityDashboard dans TaxiMoto', taxiContent.includes('import MotoSecurityDashboard'));
    test('Onglet s√©curit√© ajout√©', taxiContent.includes('value="security"'));
    test('TabsContent s√©curit√© d√©fini', taxiContent.includes('<TabsContent value="security"'));
}

if (existsSync(pdgFile)) {
    const pdgContent = readFileSync(pdgFile, 'utf8');
    test('Import MotoSecurityDashboard dans PDG', pdgContent.includes('import MotoSecurityDashboard'));
    test('Onglet s√©curit√© PDG configur√©', pdgContent.includes('isPDG={true}'));
}

// 7. V√©rification des d√©pendances
console.log('\nüì¶ V√âRIFICATION D√âPENDANCES...');
const packageJson = 'package.json';
test('package.json existe', existsSync(packageJson));

if (existsSync(packageJson)) {
    const packageContent = readFileSync(packageJson, 'utf8');
    const packageData = JSON.parse(packageContent);
    
    test('D√©pendances React pr√©sentes', packageData.dependencies?.react);
    test('D√©pendances Supabase pr√©sentes', packageData.dependencies?.['@supabase/supabase-js']);
    test('D√©pendances UI pr√©sentes', packageData.dependencies?.['@radix-ui/react-dialog']);
    test('D√©pendances utilitaires pr√©sentes', packageData.dependencies?.['date-fns']);
}

// 8. V√©rification de la configuration
console.log('\n‚öôÔ∏è V√âRIFICATION CONFIGURATION...');
const viteConfig = 'vite.config.ts';
test('Configuration Vite pr√©sente', existsSync(viteConfig));

if (existsSync(viteConfig)) {
    const viteContent = readFileSync(viteConfig, 'utf8');
    test('Plugin PWA configur√©', viteContent.includes('VitePWA'));
    test('Manifest PWA d√©fini', viteContent.includes('manifest:'));
    test('Workbox configur√©', viteContent.includes('workbox:'));
}

// 9. V√©rification des types TypeScript
console.log('\nüìù V√âRIFICATION TYPES TYPESCRIPT...');
const tsConfig = 'tsconfig.json';
test('Configuration TypeScript pr√©sente', existsSync(tsConfig));

if (existsSync(tsConfig)) {
    const tsContent = readFileSync(tsConfig, 'utf8');
    const tsData = JSON.parse(tsContent);
    test('Strict mode activ√©', tsData.compilerOptions?.strict);
    test('Paths alias configur√©s', tsData.compilerOptions?.paths?.['@/*']);
}

// 10. R√©sum√© des tests
console.log('\nüìä R√âSUM√â DES TESTS');
console.log('===================');
console.log(`‚úÖ Tests r√©ussis: ${testsPassed}/${testsTotal}`);
console.log(`‚ùå Tests √©chou√©s: ${testsTotal - testsPassed}/${testsTotal}`);

const successRate = Math.round((testsPassed / testsTotal) * 100);
console.log(`üìà Taux de r√©ussite: ${successRate}%`);

if (successRate >= 90) {
    console.log('\nüéâ SYST√àME S√âCURIT√â MOTOS PR√äT !');
    console.log('‚úÖ Toutes les fonctionnalit√©s sont correctement impl√©ment√©es');
    console.log('üöÄ Le syst√®me peut √™tre d√©ploy√© en production');
} else if (successRate >= 70) {
    console.log('\n‚ö†Ô∏è SYST√àME PARTIELLEMENT FONCTIONNEL');
    console.log('üîß Quelques ajustements n√©cessaires avant d√©ploiement');
} else {
    console.log('\n‚ùå SYST√àME NON FONCTIONNEL');
    console.log('üö® Des corrections majeures sont n√©cessaires');
}

console.log('\nüîç DIAGNOSTIC TERMIN√â');
console.log('=====================');
