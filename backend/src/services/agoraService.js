/**
 * üéØ SERVICE AGORA - 224SOLUTIONS
 * Service professionnel pour la g√©n√©ration de tokens Agora RTC et RTM
 * Gestion s√©curis√©e des communications audio/vid√©o/chat
 */

const { RtcTokenBuilder, RtmTokenBuilder, RtcRole } = require('agora-access-token');
const logger = require('../utils/logger');

class AgoraService {
  constructor() {
    this.appId = process.env.AGORA_APP_ID;
    this.appCertificate = process.env.AGORA_APP_CERTIFICATE;
    
    if (!this.appId || !this.appCertificate) {
      logger.error('‚ùå Agora credentials manquants dans .env');
      throw new Error('Configuration Agora incompl√®te');
    }
    
    logger.info('‚úÖ Service Agora initialis√© avec succ√®s');
  }

  /**
   * G√©n√®re un token RTC pour les appels audio/vid√©o
   * @param {string} channelName - Nom du canal
   * @param {string} uid - ID utilisateur (peut √™tre string ou number)
   * @param {string} role - 'publisher' ou 'subscriber'
   * @param {number} expirationTimeInSeconds - Dur√©e de validit√© (d√©faut: 3600s = 1h)
   * @returns {string} Token RTC
   */
  generateRTCToken(channelName, uid, role = 'publisher', expirationTimeInSeconds = 3600) {
    try {
      if (!channelName || !uid) {
        throw new Error('channelName et uid sont requis');
      }

      const currentTimestamp = Math.floor(Date.now() / 1000);
      const privilegeExpiredTs = currentTimestamp + expirationTimeInSeconds;
      
      // Convertir le r√¥le en constante Agora
      const agoraRole = role === 'publisher' ? RtcRole.PUBLISHER : RtcRole.SUBSCRIBER;
      
      // Convertir uid en number si c'est une string num√©rique
      const numericUid = typeof uid === 'string' && !isNaN(uid) ? parseInt(uid) : uid;

      const token = RtcTokenBuilder.buildTokenWithUid(
        this.appId,
        this.appCertificate,
        channelName,
        numericUid,
        agoraRole,
        privilegeExpiredTs
      );

      logger.info(`üé• Token RTC g√©n√©r√©`, {
        channelName,
        uid: numericUid,
        role,
        expiresAt: new Date(privilegeExpiredTs * 1000).toISOString()
      });

      return token;
    } catch (error) {
      logger.error('‚ùå Erreur g√©n√©ration token RTC:', error);
      throw new Error(`√âchec g√©n√©ration token RTC: ${error.message}`);
    }
  }

  /**
   * G√©n√®re un token RTM pour le chat temps r√©el
   * @param {string} userId - ID utilisateur
   * @param {number} expirationTimeInSeconds - Dur√©e de validit√© (d√©faut: 3600s = 1h)
   * @returns {string} Token RTM
   */
  generateRTMToken(userId, expirationTimeInSeconds = 3600) {
    try {
      if (!userId) {
        throw new Error('userId est requis');
      }

      const currentTimestamp = Math.floor(Date.now() / 1000);
      const privilegeExpiredTs = currentTimestamp + expirationTimeInSeconds;

      const token = RtmTokenBuilder.buildToken(
        this.appId,
        this.appCertificate,
        userId,
        privilegeExpiredTs
      );

      logger.info(`üí¨ Token RTM g√©n√©r√©`, {
        userId,
        expiresAt: new Date(privilegeExpiredTs * 1000).toISOString()
      });

      return token;
    } catch (error) {
      logger.error('‚ùå Erreur g√©n√©ration token RTM:', error);
      throw new Error(`√âchec g√©n√©ration token RTM: ${error.message}`);
    }
  }

  /**
   * G√©n√®re les tokens pour une session compl√®te (RTC + RTM)
   * @param {string} userId - ID utilisateur
   * @param {string} channelName - Nom du canal pour RTC
   * @param {string} role - R√¥le RTC ('publisher' ou 'subscriber')
   * @param {number} expirationTimeInSeconds - Dur√©e de validit√©
   * @returns {Object} Objet contenant les tokens RTC et RTM
   */
  generateSessionTokens(userId, channelName, role = 'publisher', expirationTimeInSeconds = 3600) {
    try {
      const rtcToken = this.generateRTCToken(channelName, userId, role, expirationTimeInSeconds);
      const rtmToken = this.generateRTMToken(userId, expirationTimeInSeconds);

      const sessionData = {
        appId: this.appId,
        userId,
        channelName,
        rtcToken,
        rtmToken,
        role,
        expiresAt: new Date((Math.floor(Date.now() / 1000) + expirationTimeInSeconds) * 1000).toISOString(),
        generatedAt: new Date().toISOString()
      };

      logger.info(`üéØ Session compl√®te g√©n√©r√©e pour utilisateur ${userId}`);
      
      return sessionData;
    } catch (error) {
      logger.error('‚ùå Erreur g√©n√©ration session compl√®te:', error);
      throw new Error(`√âchec g√©n√©ration session: ${error.message}`);
    }
  }

  /**
   * Valide la configuration Agora
   * @returns {Object} Statut de la configuration
   */
  validateConfiguration() {
    const isValid = !!(this.appId && this.appCertificate);
    
    return {
      isValid,
      appId: this.appId ? `${this.appId.substring(0, 8)}...` : 'Non configur√©',
      appCertificate: this.appCertificate ? 'Configur√©' : 'Non configur√©',
      timestamp: new Date().toISOString()
    };
  }

  /**
   * G√©n√®re un nom de canal unique pour une conversation
   * @param {string} user1Id - ID du premier utilisateur
   * @param {string} user2Id - ID du second utilisateur
   * @returns {string} Nom de canal unique
   */
  generateChannelName(user1Id, user2Id) {
    // Trier les IDs pour garantir un nom de canal coh√©rent
    const sortedIds = [user1Id, user2Id].sort();
    return `chat_${sortedIds[0]}_${sortedIds[1]}`;
  }

  /**
   * G√©n√®re un nom de canal pour un groupe
   * @param {string} groupId - ID du groupe
   * @returns {string} Nom de canal de groupe
   */
  generateGroupChannelName(groupId) {
    return `group_${groupId}`;
  }
}

module.exports = new AgoraService();
