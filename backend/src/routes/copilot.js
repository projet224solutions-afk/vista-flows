/**
 * ü§ñ API COPILOTE 224 - CHATGPT INT√âGRAL
 * Backend pour le Copilote IA avec OpenAI GPT-4o-mini
 * Int√©gration compl√®te avec Supabase et actions m√©tiers
 */

const express = require("express");
const router = express.Router();
const { Configuration, OpenAIApi } = require("openai");
const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');

// Configuration Supabase
const supabase = createClient(
  process.env.SUPABASE_URL || 'https://uakkxaibujzxdiqzpnpr.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
);

// Configuration OpenAI
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Middleware d'authentification
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token d\'authentification requis' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ error: 'Token invalide' });
  }
};

// POST /api/copilot - Chat avec le Copilote
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { message } = req.body;
    const userId = req.user.sub;

    if (!message || !message.trim()) {
      return res.status(400).json({ error: 'Message requis' });
    }

    console.log(`ü§ñ Copilote 224 - Message de ${userId}: ${message}`);

    // 1Ô∏è‚É£ R√©cup√©rer le contexte utilisateur depuis Supabase
    const { data: user, error: userError } = await supabase
      .from('profiles')
      .select(`
        id,
        email,
        first_name,
        last_name,
        role,
        created_at
      `)
      .eq('id', userId)
      .single();

    if (userError || !user) {
      return res.status(404).json({ error: 'Utilisateur non trouv√©' });
    }

    // 2Ô∏è‚É£ R√©cup√©rer les donn√©es du wallet
    const { data: wallet } = await supabase
      .from('wallets')
      .select('balance, currency')
      .eq('user_id', userId)
      .single();

    // 3Ô∏è‚É£ R√©cup√©rer les transactions r√©centes
    const { data: transactions } = await supabase
      .from('transactions')
      .select('amount, currency, type, description, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    // 4Ô∏è‚É£ R√©cup√©rer l'historique de conversation
    const { data: history } = await supabase
      .from('ai_chats')
      .select('role, message, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: true })
      .limit(10);

    // 5Ô∏è‚É£ Construire le contexte syst√®me
    const systemPrompt = `Tu es Copilote 224, l'assistant intelligent de l'application 224SOLUTIONS.

INFORMATIONS UTILISATEUR:
- Nom: ${user.first_name} ${user.last_name}
- Email: ${user.email}
- R√¥le: ${user.role}
- Solde wallet: ${wallet?.balance || 0} ${wallet?.currency || 'GNF'}
- Devise par d√©faut: ${wallet?.currency || 'GNF'}

CAPACIT√âS:
- Tu peux r√©pondre √† toutes les questions sur l'application 224SOLUTIONS
- Tu peux simuler des calculs financiers et conversions de devises
- Tu peux expliquer les fonctionnalit√©s du syst√®me
- Tu peux aider avec les transactions et le wallet
- Tu peux donner des conseils sur l'utilisation de l'application

STYLE DE R√âPONSE:
- R√©ponds en fran√ßais naturel, style ChatGPT
- Sois professionnel, clair, complet et engageant
- Utilise des emojis appropri√©s
- Structure tes r√©ponses avec des listes et des explications d√©taill√©es
- Si tu ne peux pas ex√©cuter une action, explique poliment pourquoi

ACTIONS M√âTIERS DISPONIBLES:
- /wallet balance ‚Üí Affiche le solde du wallet
- /transaction history ‚Üí Liste les transactions r√©centes
- /finance simulation ‚Üí Simule des conversions de devises
- /rate show ‚Üí Affiche les taux de change actuels
- /help ‚Üí Affiche l'aide et les commandes disponibles

TRANSACTIONS R√âCENTES:
${transactions?.map(t => `- ${t.type}: ${t.amount} ${t.currency} (${t.description})`).join('\n') || 'Aucune transaction r√©cente'}

R√©ponds de mani√®re naturelle et utile √† l'utilisateur.`;

    // 6Ô∏è‚É£ Construire les messages pour OpenAI
    const messages = [
      { role: 'system', content: systemPrompt },
      // Historique de conversation
      ...history.map(h => ({
        role: h.role === 'user' ? 'user' : 'assistant',
        content: h.message
      })),
      { role: 'user', content: message }
    ];

    // 7Ô∏è‚É£ Appel OpenAI GPT-4o-mini
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      temperature: 0.7,
      max_tokens: 1000,
    });

    const reply = completion.choices[0].message.content;

    // 8Ô∏è‚É£ Sauvegarder la conversation
    await supabase.from('ai_chats').insert([
      { user_id: userId, role: 'user', message: message.trim() },
      { user_id: userId, role: 'assistant', message: reply }
    ]);

    // 9Ô∏è‚É£ Logger l'interaction
    await supabase.from('ai_logs').insert({
      user_id: userId,
      user_role: user.role,
      message: message.trim(),
      response: reply,
      timestamp: new Date().toISOString()
    });

    console.log(`‚úÖ Copilote 224 - R√©ponse g√©n√©r√©e pour ${userId}`);

    res.json({ 
      reply,
      timestamp: new Date().toISOString(),
      user_context: {
        name: `${user.first_name} ${user.last_name}`,
        role: user.role,
        balance: wallet?.balance || 0,
        currency: wallet?.currency || 'GNF'
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur Copilote 224:', error);
    
    // Fallback en cas d'erreur
    const fallbackReply = `D√©sol√©, je rencontre une difficult√© technique. Veuillez r√©essayer dans quelques instants. Si le probl√®me persiste, contactez le support technique.`;
    
    res.status(500).json({ 
      error: 'Erreur serveur copilote',
      reply: fallbackReply
    });
  }
});

// GET /api/copilot/history - R√©cup√©rer l'historique
router.get('/history', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.sub;
    const { limit = 20 } = req.query;

    const { data: history, error } = await supabase
      .from('ai_chats')
      .select('role, message, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(parseInt(limit));

    if (error) {
      return res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de l\'historique' });
    }

    res.json({ history: history.reverse() });
  } catch (error) {
    console.error('‚ùå Erreur historique:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// POST /api/copilot/clear - Effacer l'historique
router.post('/clear', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.sub;

    const { error } = await supabase
      .from('ai_chats')
      .delete()
      .eq('user_id', userId);

    if (error) {
      return res.status(500).json({ error: 'Erreur lors de l\'effacement de l\'historique' });
    }

    res.json({ message: 'Historique effac√© avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur effacement:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// GET /api/copilot/status - Statut du service
router.get('/status', (req, res) => {
  res.json({ 
    status: 'active',
    service: 'Copilote 224 - ChatGPT Int√©gral',
    version: '1.0.0',
    features: [
      'ChatGPT style conversation',
      'Int√©gration Supabase',
      'Actions m√©tiers',
      'Historique conversationnel',
      'S√©curit√© par r√¥le'
    ]
  });
});

module.exports = router;
