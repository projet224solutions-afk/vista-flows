/**
 * üß™ SCRIPT DE TEST - SYST√àME MULTI-DEVISES
 * Test complet du syst√®me de transfert multi-devises
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testMultiCurrencySystem() {
    console.log('üß™ D√âBUT DES TESTS - SYST√àME MULTI-DEVISES');
    console.log('='.repeat(50));

    try {
        // 1. Test de connexion √† la base de donn√©es
        console.log('\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...');
        const { data: connectionTest, error: connectionError } = await supabase
            .from('currencies')
            .select('count')
            .limit(1);

        if (connectionError) {
            throw new Error(`Erreur de connexion: ${connectionError.message}`);
        }
        console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

        // 2. Test des tables
        console.log('\n2Ô∏è‚É£ Test des tables...');
        const tables = ['currencies', 'exchange_rates', 'transfer_fees', 'multi_currency_transfers', 'daily_transfer_limits'];

        for (const table of tables) {
            const { data, error } = await supabase
                .from(table)
                .select('count')
                .limit(1);

            if (error) {
                console.log(`‚ùå Table ${table}: ${error.message}`);
            } else {
                console.log(`‚úÖ Table ${table}: OK`);
            }
        }

        // 3. Test des devises
        console.log('\n3Ô∏è‚É£ Test des devises disponibles...');
        const { data: currencies, error: currenciesError } = await supabase
            .from('currencies')
            .select('code, name, symbol')
            .eq('is_active', true);

        if (currenciesError) {
            console.log(`‚ùå Erreur devises: ${currenciesError.message}`);
        } else {
            console.log(`‚úÖ ${currencies.length} devises disponibles:`, currencies.map(c => c.code).join(', '));
        }

        // 4. Test des taux de change
        console.log('\n4Ô∏è‚É£ Test des taux de change...');
        const { data: rates, error: ratesError } = await supabase
            .from('exchange_rates')
            .select('from_currency, to_currency, rate')
            .eq('is_active', true)
            .limit(5);

        if (ratesError) {
            console.log(`‚ùå Erreur taux: ${ratesError.message}`);
        } else {
            console.log(`‚úÖ ${rates.length} taux de change disponibles`);
            rates.forEach(rate => {
                console.log(`   ${rate.from_currency} ‚Üí ${rate.to_currency}: ${rate.rate}`);
            });
        }

        // 5. Test des frais de transfert
        console.log('\n5Ô∏è‚É£ Test des frais de transfert...');
        const { data: fees, error: feesError } = await supabase
            .from('transfer_fees')
            .select('user_role, fee_fixed, fee_percentage, currency')
            .eq('is_active', true)
            .limit(3);

        if (feesError) {
            console.log(`‚ùå Erreur frais: ${feesError.message}`);
        } else {
            console.log(`‚úÖ ${fees.length} configurations de frais disponibles`);
            fees.forEach(fee => {
                console.log(`   ${fee.user_role}: ${fee.fee_fixed} + ${(fee.fee_percentage * 100).toFixed(2)}% (${fee.currency})`);
            });
        }

        // 6. Test des fonctions SQL
        console.log('\n6Ô∏è‚É£ Test des fonctions SQL...');

        // Test de la fonction get_exchange_rate
        const { data: exchangeRate, error: exchangeRateError } = await supabase
            .rpc('get_exchange_rate', {
                p_from_currency: 'GNF',
                p_to_currency: 'USD'
            });

        if (exchangeRateError) {
            console.log(`‚ùå Erreur get_exchange_rate: ${exchangeRateError.message}`);
        } else {
            console.log(`‚úÖ Taux GNF ‚Üí USD: ${exchangeRate}`);
        }

        // Test de la fonction calculate_transfer_fees
        const { data: calculatedFees, error: feesCalcError } = await supabase
            .rpc('calculate_transfer_fees', {
                p_user_role: 'client',
                p_amount: 10000,
                p_currency: 'GNF'
            });

        if (feesCalcError) {
            console.log(`‚ùå Erreur calculate_transfer_fees: ${feesCalcError.message}`);
        } else {
            console.log(`‚úÖ Frais calcul√©s:`, calculatedFees);
        }

        // 7. Test de g√©n√©ration d'ID de transaction
        console.log('\n7Ô∏è‚É£ Test de g√©n√©ration d'ID de transaction...');
    const { data: transactionId, error: idError } = await supabase
            .rpc('generate_transaction_id');

        if (idError) {
            console.log(`‚ùå Erreur generate_transaction_id: ${idError.message}`);
        } else {
            console.log(`‚úÖ ID de transaction g√©n√©r√©: ${transactionId}`);
        }

        // 8. Test de statistiques
        console.log('\n8Ô∏è‚É£ Test des statistiques...');
        const { data: stats, error: statsError } = await supabase
            .from('multi_currency_transfers')
            .select('count')
            .limit(1);

        if (statsError) {
            console.log(`‚ùå Erreur statistiques: ${statsError.message}`);
        } else {
            console.log(`‚úÖ Table multi_currency_transfers accessible`);
        }

        console.log('\nüéâ TOUS LES TESTS TERMIN√âS');
        console.log('='.repeat(50));
        console.log('‚úÖ Le syst√®me multi-devises est pr√™t √† √™tre utilis√© !');
        console.log('\nüìã R√âSUM√â:');
        console.log('   ‚Ä¢ Tables cr√©√©es et accessibles');
        console.log('   ‚Ä¢ Devises configur√©es');
        console.log('   ‚Ä¢ Taux de change op√©rationnels');
        console.log('   ‚Ä¢ Frais de transfert configur√©s');
        console.log('   ‚Ä¢ Fonctions SQL fonctionnelles');
        console.log('\nüöÄ Le syst√®me est maintenant op√©rationnel !');

    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DES TESTS:', error.message);
        console.log('\nüîß ACTIONS RECOMMAND√âES:');
        console.log('   1. V√©rifier la configuration Supabase');
        console.log('   2. Ex√©cuter les migrations SQL');
        console.log('   3. V√©rifier les permissions RLS');
        console.log('   4. Relancer les tests');
    }
}

// Ex√©cuter les tests
if (require.main === module) {
    testMultiCurrencySystem()
        .then(() => {
            console.log('\n‚úÖ Tests termin√©s avec succ√®s');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Tests √©chou√©s:', error);
            process.exit(1);
        });
}

module.exports = { testMultiCurrencySystem };
