version: '3.8'

services:
  # üìä Zookeeper - Coordination Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: 224solutions-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - 224solutions-network
    restart: unless-stopped

  # üîÑ Kafka Broker - Message Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: 224solutions-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      # Optimisations pour 224Solutions
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1000000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - 224solutions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # üéØ Kafka UI - Interface de gestion
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: 224solutions-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8080"  # Port 8081 pour √©viter conflit avec Vite
    environment:
      KAFKA_CLUSTERS_0_NAME: 224solutions-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      # Configuration pour 224Solutions
      KAFKA_CLUSTERS_0_READONLY: false
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - 224solutions-network
    restart: unless-stopped

  # üîó Kafka Connect - Int√©gration avec Supabase/PostgreSQL
  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: 224solutions-kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 224solutions-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      # Plugins pour PostgreSQL/Supabase
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_ROOT_LOGLEVEL: WARN
    volumes:
      - ./kafka-connect-plugins:/usr/share/confluent-hub-components
    networks:
      - 224solutions-network
    restart: unless-stopped

  # üìà Kafka Exporter - M√©triques Prometheus
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: 224solutions-kafka-exporter
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:9092
      - --log.level=warn
    networks:
      - 224solutions-network
    restart: unless-stopped

  # üóÉÔ∏è Redis - Cache et Session Storage pour 224Solutions
  redis:
    image: redis:7-alpine
    container_name: 224solutions-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - 224solutions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üîç Schema Registry - Gestion des sch√©mas de messages
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: 224solutions-schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - 224solutions-network
    restart: unless-stopped

networks:
  224solutions-network:
    driver: bridge
    name: 224solutions-network

# üì¶ Volumes persistants pour les donn√©es
volumes:
  kafka-data:
    name: 224solutions-kafka-data
  zookeeper-data:
    name: 224solutions-zookeeper-data
  zookeeper-logs:
    name: 224solutions-zookeeper-logs
  redis-data:
    name: 224solutions-redis-data
