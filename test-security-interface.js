/**
 * TEST SIMPLE - INTERFACE DE S√âCURIT√â 224SOLUTIONS
 * V√©rification que l'interface de s√©curit√© est bien int√©gr√©e
 */

import fs from 'fs';
import path from 'path';

console.log('üîí TEST DE L\'INTERFACE DE S√âCURIT√â - 224SOLUTIONS');
console.log('===============================================\n');

// =====================================================
// TEST 1: V√âRIFICATION DES FICHIERS CR√â√âS
// =====================================================

function testSecurityFiles() {
    console.log('üìÅ TEST 1: V√©rification des fichiers de s√©curit√©...');

    const requiredFiles = [
        'src/services/securityService.ts',
        'src/hooks/useSecurity.ts',
        'src/components/security/SecurityDashboard.tsx',
        'supabase/migrations/20250101120000_security_monitoring_system_complete.sql'
    ];

    let allFilesExist = true;

    requiredFiles.forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            const sizeKB = (stats.size / 1024).toFixed(1);
            console.log(`‚úÖ ${filePath} - ${sizeKB} KB`);
        } else {
            console.log(`‚ùå ${filePath} - MANQUANT`);
            allFilesExist = false;
        }
    });

    if (allFilesExist) {
        console.log('‚úÖ Tous les fichiers de s√©curit√© sont pr√©sents\n');
    } else {
        console.log('‚ùå Certains fichiers de s√©curit√© sont manquants\n');
    }

    return allFilesExist;
}

// =====================================================
// TEST 2: V√âRIFICATION DE L'INT√âGRATION PDG
// =====================================================

function testPDGIntegration() {
    console.log('üéØ TEST 2: V√©rification de l\'int√©gration dans PDGDashboard...');

    try {
        const pdgDashboardPath = 'src/pages/PDGDashboard.tsx';

        if (!fs.existsSync(pdgDashboardPath)) {
            console.log('‚ùå PDGDashboard.tsx non trouv√©');
            return false;
        }

        const content = fs.readFileSync(pdgDashboardPath, 'utf8');

        const checks = [
            { name: 'Import SecurityDashboard', pattern: /import SecurityDashboard from.*SecurityDashboard/ },
            { name: 'Onglet S√©curit√© dans TabsList', pattern: /TabsTrigger.*value="security".*S√©curit√©/ },
            { name: 'TabsContent s√©curit√©', pattern: /TabsContent.*value="security"/ },
            { name: 'Composant SecurityDashboard', pattern: /<SecurityDashboard.*\/>/ },
            { name: 'Grid cols-9 (9 onglets)', pattern: /grid-cols-9/ }
        ];

        let allChecksPass = true;

        checks.forEach(check => {
            if (check.pattern.test(content)) {
                console.log(`‚úÖ ${check.name}`);
            } else {
                console.log(`‚ùå ${check.name}`);
                allChecksPass = false;
            }
        });

        if (allChecksPass) {
            console.log('‚úÖ Int√©gration PDG compl√®te\n');
        } else {
            console.log('‚ùå Int√©gration PDG incompl√®te\n');
        }

        return allChecksPass;

    } catch (error) {
        console.log(`‚ùå Erreur lors de la v√©rification: ${error.message}\n`);
        return false;
    }
}

// =====================================================
// TEST 3: V√âRIFICATION DU CONTENU DES COMPOSANTS
// =====================================================

function testComponentContent() {
    console.log('üß© TEST 3: V√©rification du contenu des composants...');

    try {
        // V√©rifier SecurityDashboard
        const dashboardPath = 'src/components/security/SecurityDashboard.tsx';
        const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');

        const dashboardFeatures = [
            { name: 'Vue d\'ensemble', pattern: /SecurityOverview/ },
            { name: 'Monitoring temps r√©el', pattern: /RealTimeMonitoring/ },
            { name: 'Gestion des menaces', pattern: /ThreatManagement/ },
            { name: 'Gestion des incidents', pattern: /IncidentManagement/ },
            { name: 'Protection active', pattern: /ActiveProtection/ },
            { name: 'Audit de s√©curit√©', pattern: /SecurityAudit/ },
            { name: 'Rapports', pattern: /SecurityReports/ },
            { name: 'Graphiques Recharts', pattern: /LineChart.*BarChart.*PieChart/ }
        ];

        console.log('   Dashboard de s√©curit√©:');
        dashboardFeatures.forEach(feature => {
            if (feature.pattern.test(dashboardContent)) {
                console.log(`   ‚úÖ ${feature.name}`);
            } else {
                console.log(`   ‚ùå ${feature.name}`);
            }
        });

        // V√©rifier les hooks
        const hooksPath = 'src/hooks/useSecurity.ts';
        const hooksContent = fs.readFileSync(hooksPath, 'utf8');

        const hookFeatures = [
            { name: 'useSecurity', pattern: /export function useSecurity/ },
            { name: 'useSecurityAlerts', pattern: /export function useSecurityAlerts/ },
            { name: 'useSecurityIncidents', pattern: /export function useSecurityIncidents/ },
            { name: 'useRealTimeMonitoring', pattern: /export function useRealTimeMonitoring/ },
            { name: 'useSecurityAnalysis', pattern: /export function useSecurityAnalysis/ }
        ];

        console.log('   Hooks de s√©curit√©:');
        hookFeatures.forEach(feature => {
            if (feature.pattern.test(hooksContent)) {
                console.log(`   ‚úÖ ${feature.name}`);
            } else {
                console.log(`   ‚ùå ${feature.name}`);
            }
        });

        // V√©rifier le service
        const servicePath = 'src/services/securityService.ts';
        const serviceContent = fs.readFileSync(servicePath, 'utf8');

        const serviceFeatures = [
            { name: 'SecurityService class', pattern: /export class SecurityService/ },
            { name: 'Monitoring temps r√©el', pattern: /initializeRealTimeMonitoring/ },
            { name: 'Gestion des √©v√©nements', pattern: /logSecurityEvent/ },
            { name: 'Analyse de menaces', pattern: /analyzeThreat/ },
            { name: 'Blocage d\'IPs', pattern: /blockIP/ },
            { name: 'Syst√®me d\'alertes', pattern: /createAlert/ }
        ];

        console.log('   Service de s√©curit√©:');
        serviceFeatures.forEach(feature => {
            if (feature.pattern.test(serviceContent)) {
                console.log(`   ‚úÖ ${feature.name}`);
            } else {
                console.log(`   ‚ùå ${feature.name}`);
            }
        });

        console.log('‚úÖ V√©rification du contenu termin√©e\n');
        return true;

    } catch (error) {
        console.log(`‚ùå Erreur lors de la v√©rification du contenu: ${error.message}\n`);
        return false;
    }
}

// =====================================================
// TEST 4: V√âRIFICATION DE LA MIGRATION SQL
// =====================================================

function testSQLMigration() {
    console.log('üóÑÔ∏è TEST 4: V√©rification de la migration SQL...');

    try {
        const migrationPath = 'supabase/migrations/20250101120000_security_monitoring_system_complete.sql';
        const migrationContent = fs.readFileSync(migrationPath, 'utf8');

        const sqlFeatures = [
            { name: 'Table security_monitoring', pattern: /CREATE TABLE.*security_monitoring/ },
            { name: 'Table security_incidents', pattern: /CREATE TABLE.*security_incidents/ },
            { name: 'Table blocked_ips', pattern: /CREATE TABLE.*blocked_ips/ },
            { name: 'Table system_alerts', pattern: /CREATE TABLE.*system_alerts/ },
            { name: 'Fonction generate_security_id', pattern: /CREATE OR REPLACE FUNCTION generate_security_id/ },
            { name: 'Fonction calculate_threat_score', pattern: /CREATE OR REPLACE FUNCTION calculate_threat_score/ },
            { name: 'Trigger d√©tection connexions', pattern: /CREATE TRIGGER.*detect_suspicious_login/ },
            { name: 'Politiques RLS', pattern: /CREATE POLICY.*Admin full access/ },
            { name: 'Index de performance', pattern: /CREATE INDEX.*security_monitoring/ }
        ];

        sqlFeatures.forEach(feature => {
            if (feature.pattern.test(migrationContent)) {
                console.log(`‚úÖ ${feature.name}`);
            } else {
                console.log(`‚ùå ${feature.name}`);
            }
        });

        const migrationSize = (fs.statSync(migrationPath).size / 1024).toFixed(1);
        console.log(`‚úÖ Migration SQL compl√®te (${migrationSize} KB)\n`);

        return true;

    } catch (error) {
        console.log(`‚ùå Erreur lors de la v√©rification SQL: ${error.message}\n`);
        return false;
    }
}

// =====================================================
// TEST 5: V√âRIFICATION DE LA STRUCTURE DES DOSSIERS
// =====================================================

function testFolderStructure() {
    console.log('üìÇ TEST 5: V√©rification de la structure des dossiers...');

    const requiredDirs = [
        'src/components/security',
        'src/services',
        'src/hooks',
        'supabase/migrations'
    ];

    requiredDirs.forEach(dir => {
        if (fs.existsSync(dir) && fs.statSync(dir).isDirectory()) {
            const files = fs.readdirSync(dir).length;
            console.log(`‚úÖ ${dir} (${files} fichiers)`);
        } else {
            console.log(`‚ùå ${dir} - MANQUANT`);
        }
    });

    console.log('‚úÖ Structure des dossiers v√©rifi√©e\n');
    return true;
}

// =====================================================
// FONCTION PRINCIPALE
// =====================================================

function runInterfaceTests() {
    console.log('üöÄ D√âBUT DES TESTS D\'INTERFACE DE S√âCURIT√â');
    console.log('============================================\n');

    const results = {
        files: testSecurityFiles(),
        integration: testPDGIntegration(),
        content: testComponentContent(),
        migration: testSQLMigration(),
        structure: testFolderStructure()
    };

    console.log('============================================');
    console.log('üìä R√âSULTATS DES TESTS:');
    console.log('============================================');

    Object.entries(results).forEach(([test, passed]) => {
        const status = passed ? '‚úÖ PASS√â' : '‚ùå √âCHOU√â';
        const testName = test.charAt(0).toUpperCase() + test.slice(1);
        console.log(`${status} - ${testName}`);
    });

    const allPassed = Object.values(results).every(result => result === true);

    console.log('============================================');

    if (allPassed) {
        console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
        console.log('üîí L\'interface de s√©curit√© est PARFAITEMENT int√©gr√©e !');
        console.log('');
        console.log('üéØ PR√äT √Ä TESTER DANS LE NAVIGATEUR:');
        console.log('   1. Allez sur http://localhost:5173/pdg');
        console.log('   2. Cliquez sur l\'onglet "S√©curit√©"');
        console.log('   3. Explorez les 7 sections du dashboard');
        console.log('   4. Testez les fonctionnalit√©s interactives');
    } else {
        console.log('‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â');
        console.log('V√©rifiez les erreurs ci-dessus');
    }

    console.log('============================================');
}

// Lancer les tests
runInterfaceTests();


